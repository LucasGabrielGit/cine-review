generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String      @id @default(cuid())
  username      String      @unique
  email         String      @unique
  password_hash String
  profile_image String
  bio           String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  reviews       Review[]
  comments      Comment[]
  favorites     Favorite[]
  watchlist     Watchlist[]
  followers     Follower[]
  following     Follower[]  @relation("Following")
}

model MovieSeries {
  id           String      @id @default(cuid())
  title        String
  description  String      @db.VarChar(1000)
  release_date DateTime
  genre        String
  director     String
  cast         String
  trailer_url  String
  poster_url   String
  type         String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  reviews      Review[]
  favorites    Favorite[]
  watchlist    Watchlist[]
}

model Review {
  review_id       String      @id @default(cuid())
  user_id         String
  user            User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  movie_series_id String
  movie_series    MovieSeries @relation(fields: [movie_series_id], references: [id], onDelete: Cascade)
  rating          Int
  comment         String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  comments        Comment[]
}

model Comment {
  comment_id String   @id @default(cuid())
  review_id  String
  review     Review   @relation(fields: [review_id], references: [review_id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Favorite {
  favorite_id     String      @id @default(cuid())
  user_id         String
  user            User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  movie_series_id String
  movie_series    MovieSeries @relation(fields: [movie_series_id], references: [id], onDelete: Cascade)
  created_at      DateTime    @default(now())
}

model Watchlist {
  watchlist_id    String      @id @default(cuid())
  user_id         String
  user            User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  movie_series_id String
  movie_series    MovieSeries @relation(fields: [movie_series_id], references: [id], onDelete: Cascade)
  created_at      DateTime    @default(now())
}

model Follower {
  follower_id      String   @id @default(cuid())
  user_id          String
  user             User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  followed_user_id String
  followed_user    User     @relation("Following", fields: [followed_user_id], references: [user_id], onDelete: Cascade)
  created_at       DateTime @default(now())
}
